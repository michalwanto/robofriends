{"version":3,"sources":["containers/reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","containers/actionType.js","components/Scroll.js","components/CountButton.js","components/Header.js","containers/App.js","containers/actions.js","registerServiceWorker.js","index.js"],"names":["initialStateSearchField","searchField","intitalStateRobots","robots","Card","name","email","id","className","alt","src","CardList","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","actionType","CHANGE_SEARCH_FIELD","FETCH_ROBOTS_PENDING","FETCH_ROBOTS_SUCCESS","FETCH_ROBOTS_FAILED","Scroll","props","style","overflow","border","height","children","CountButton","upgradeCount","console","log","setState","state","count","nextProps","nextState","color","this","onClick","React","Component","Header","App","onSearchChange","event","target","value","fetchRobots","error","isPending","filteredRobots","filter","robot","toLowerCase","includes","length","connect","searchFieldReducer","fetchRobotsReducer","dispatch","text","payload","fetch","then","response","json","users","catch","err","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3faafef0.chunk.js","sourcesContent":["const initialStateSearchField = {\n  searchField: \"\",\n};\n\nexport const searchFieldReducer = (\n  state = initialStateSearchField,\n  action = {}\n) => {\n  switch (action.type) {\n    case \"CHANGE_SEARCH_FIELD\":\n      return { ...state, searchField: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst intitalStateRobots = {\n  robots: [],\n};\n\nexport const fetchRobotsReducer = (state = intitalStateRobots, action = {}) => {\n  switch (action.type) {\n    case \"FETCH_ROBOTS_PENDING\":\n      return { ...state, isPending: true };\n    case \"FETCH_ROBOTS_SUCCESS\":\n      return { ...state, isPending: false, robots: action.payload };\n    case \"FETCH_ROBOTS_FAILED\":\n      return { ...state, isPending: false, error: action.payload };\n    default:\n      return state;\n  }\n};\n","import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='tc grow bg-light-green br3 pa3 ma2 dib bw2 shadow-5'>\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {\n        robots.map((user, i) => {\n          return (\n            <Card\n              key={i}\n              id={robots[i].id}\n              name={robots[i].name}\n              email={robots[i].email}\n              />\n          );\n        })\n      }\n    </div>\n  );\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <label> </label>\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","const actionType = {\n  CHANGE_SEARCH_FIELD: \"CHANGE_SEARCH_FIELD\",\n  FETCH_ROBOTS_PENDING: \"FETCH_ROBOTS_PENDING\",\n  FETCH_ROBOTS_SUCCESS: \"FETCH_ROBOTS_SUCCESS\",\n  FETCH_ROBOTS_FAILED: \"FETCH_ROBOTS_FAILED\",\n};\nexport default actionType;\n","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{ overflow: 'scroll', border: '5px solid black', height: '800px'}}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;","import React from \"react\";\n\nclass CountButton extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0,\n    };\n  }\n  shouldComponentUpdate(nextProps, nextState) {\n    return true;\n  }\n\n  upgradeCount = () => {\n    console.log(\"got clicked\");\n    this.setState((state) => {\n      return { count: state.count + 1 };\n    });\n  };\n\n  render() {\n    console.log(\"CountButton\");\n    return (\n      <button color={this.props.color} onClick={this.upgradeCount}>\n        Count {this.state.count}\n      </button>\n    );\n  }\n}\n\nexport default CountButton;\n","import React from \"react\";\nimport \"./Header.css\";\nimport CountButton from \"./CountButton\";\n\nclass Header extends React.Component {\n  shouldComponentUpdate(nextProps, nextState) {\n    return false;\n  }\n\n  render() {\n    console.log(\"Header\");\n    return (\n      <div>\n        <h1 className=\"f1\">RoboFriends</h1>;\n        <CountButton color=\"red\" />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport { changeSearchField, fetchRobots } from \"./actions\";\nimport Scroll from \"../components/Scroll\";\n\nimport Header from \"../components/Header\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchRobots();\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n  render() {\n    const {\n      robots,\n      error,\n      isPending,\n      searchField,\n      onSearchChange,\n    } = this.props;\n\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return !robots.length ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <CardList robots={filteredRobots} />\n        </Scroll>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    searchField: state.searchFieldReducer.searchField,\n    isPending: state.fetchRobotsReducer.isPending,\n    robots: state.fetchRobotsReducer.robots,\n    error: state.fetchRobotsReducer.error,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(changeSearchField(event.target.value)),\n    fetchRobots: () => dispatch(fetchRobots()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import actionType from \"./actionType\";\n\nexport const changeSearchField = (text) => ({\n  type: actionType.CHANGE_SEARCH_FIELD,\n  payload: text,\n});\n\nexport const fetchRobots = () => (dispatch) => {\n  dispatch({ type: actionType.FETCH_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then((response) => response.json())\n    .then((users) =>\n      dispatch({ type: actionType.FETCH_ROBOTS_SUCCESS, payload: users })\n    )\n    .catch((err) =>\n      dispatch({ type: actionType.FETCH_ROBOTS_FAILED, payload: err })\n    );\n};\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport { applyMiddleware, createStore, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunk from \"redux-thunk\";\n\nimport { searchFieldReducer, fetchRobotsReducer } from \"./containers/reducers\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nimport \"tachyons\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchFieldReducer, fetchRobotsReducer });\nconst store = createStore(rootReducer, applyMiddleware(logger, thunk));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\nregisterServiceWorker();\n"],"sourceRoot":""}